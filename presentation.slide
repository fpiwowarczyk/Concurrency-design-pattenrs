# Concurrency Design Patterns in GO

Filip Piwowarczyk
Software engineer at Nobl9 
filip.piwowarczyk1997@gmail.com
@FilipPiwowarcz3
https://github.com/fpiwowarczyk/Concurrency-design-pattenrs

## About

You need

1. Basic knowledge of golang syntax 
2. Some knowledge about concurrency in different languages 

You will learn

1. How to use concurrency in go 
2. Basic problems during creating software 
## Agenda 

1. What is special in go concurrency design 
2. Basic structures 
3. Concurrency Patterns 
4. Stability Patterns 
5. QnA

## CSP like concurrency 
Golang concurrency mechanisms are based on Communicating Sequential Processes(CSP) language.

.image images/communication.jpg

## CSP like concurrency

Most of languages offers scharing memmory using:
- Locks 
- Mutexes

Go offers writing well structured, synchronized programs with:
- goroutines 
- channels

<div style="text-align: right; translate: -100px -100px"> 

.image images/drage-meme.jpg 300 400 

</div>

## Most importnant concepts 

1. Goroutines 
2. Channels
3. Select statement 
4. Sync package


: 1. Basic structure to run concurrently parts of program 
: 2. Syncing 
: 3. Controling flow of program
: 4. A lot of useful wrappers/ functions. I won't cover that in defail in here but they are preety stright forward
## Goroutines

"A gouroutine is a lightweight thread managed by the Go runtime"

.play basic-goroutines.go /START OMIT/,/END OMIT/


## Channels 

Channels allows to send and receive values. Beside that it allows to synchronize goroutines.

.image  images/channel.png 400 600

## Channels 
: It would be great to have better example
.play channels-basic.go /START OMIT/,/END OMIT/

## Select 
Select statement let's gouroutine wait for multiple actions to happend and respond with siutable actions.

.play select-basic.go /START OMIT/,/END OMIT/

## Ping-pong example
.play ping-pong.go /START OMIT/,/END OMIT/



## Patterns
Did you ever had problem with using solution that thereotically you know already enough?

.image images/thinker.png 400 300

## Concurrency Patterns
## Generator 

.play generator.go /START OMIT/,/END OMIT/


## Generator 

.play generator-fib.go /START OMIT/,/END OMIT/


## FanIn

.code fan-in.go /^func Merge/,/^}/
## FanIn

.play fan-in.go /START OMIT/,/END OMIT/

.image images/fan-in.jpg

## FanOut 
.code fanout.go /^func Split/,/^}/

## FanOut
.play fanout.go /START OMIT/,/END OMIT/

.image images/fanout.jpeg 180 400 

## Future 
.code future.go /type Future/,/^}/
.code future.go /^type InnerFuture/,/^}/

.code future.go /^func \(/,/^}/

## Future 
.play future.go /START OMIT/,/END OMIT/

## Control Patterns
## Debounce 

.play debounce-last.go  /START OMIT/,/END OMIT/

## Debounce 
.play debounce-first.go /START OMIT/,/END OMIT/

## Retry 
.play retry.go /START OMIT/,/END OMIT/

## Materials used to create these talk 

[CSP paper](https://dl.acm.org/doi/10.1145/359576.359585)

[CSP blog post](https://levelup.gitconnected.com/communicating-sequential-processes-csp-for-go-developer-in-a-nutshell-866795eb879d)

[Concurrency is not Parralelism](https://go.dev/blog/waza-talk)

[Advanced Go Concurrency Patterns](https://go.dev/talks/2013/advconc.slide#1)

[Rethinking Classical Concurrency Patterns](https://www.youtube.com/watch?v=5zXAHh5tJqQ&ab_channel=GopherAcademy)

[Pipelines](https://go.dev/blog/pipelines)

[Concurrency timeouts](https://go.dev/blog/concurrency-timeouts)

[Complex Concurrency Patterns](https://www.youtube.com/watch?v=2HOO5gIgyMg&ab_channel=GopherConUK)

[Visualizing Concurrency](https://www.youtube.com/watch?v=KyuFeiG3Y60&ab_channel=GopherAcademy)

[Concurrency Patterns](https://www.youtube.com/watch?v=YEKjSzIwAdA&ab_channel=CodingTech)


